(window.webpackJsonp=window.webpackJsonp||[]).push([[24],{395:function(e,a,s){"use strict";s.r(a);var n=s(29),o=Object(n.a)({},(function(){var e=this,a=e.$createElement,s=e._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("h1",{attrs:{id:"singleton-gof-üî®"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#singleton-gof-üî®"}},[e._v("#")]),e._v(" Singleton (GOF) üî®")]),e._v(" "),s("p",[s("sup",{staticClass:"footnote-ref"},[s("a",{attrs:{href:"#fn1",id:"fnref1"}},[e._v("[1]")])])]),e._v(" "),s("p",[e._v("Em constru√ß√£o üöß")]),e._v(" "),s("h2",{attrs:{id:"intencao"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#intencao"}},[e._v("#")]),e._v(" Inten√ß√£o")]),e._v(" "),s("p",[e._v("Garantir que uma classe tenha somente uma inst√¢ncia e fornecer um ponto global de acesso para a mesma.")]),e._v(" "),s("h2",{attrs:{id:"motivacao"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#motivacao"}},[e._v("#")]),e._v(" Motiva√ß√£o")]),e._v(" "),s("p",[e._v("√â importante para algumas classes ter uma, e apenas uma, inst√¢ncia. Por exemplo, embora possam existir muitas impressoras em um sistema, deveria haver somente um spooler de impressoras. Da mesma forma, deveria haver somente um sistema de arquivos e um gerenciador de janelas. Um filtro digital ter√° somente um conversor A/ D. Um sistema de contabilidade ser√° dedicado a servir somente a uma companhia.")]),e._v(" "),s("p",[e._v("Como garantimos que uma classe tenha somente uma inst√¢ncia e que essa inst√¢ncia seja facilmente acess√≠vel? Uma vari√°vel global torna um objeto acess√≠vel, mas n√£o impede voc√™ de instanciar m√∫ltiplos objetos.")]),e._v(" "),s("p",[e._v("Uma solu√ß√£o melhor seria tornar a pr√≥pria classe respons√°vel por manter o controle da sua √∫nica inst√¢ncia. A classe pode garantir que nenhuma outra inst√¢ncia seja criada (pela intercepta√ß√£o das solicita√ß√µes para cria√ß√£o de novos objetos), bem como pode fornecer um meio para acessar sua √∫nica inst√¢ncia. Este √© o padr√£o Singleton.")]),e._v(" "),s("h2",{attrs:{id:"aplicabilidade"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#aplicabilidade"}},[e._v("#")]),e._v(" Aplicabilidade")]),e._v(" "),s("p",[e._v("Use o padr√£o Singleton quando:")]),e._v(" "),s("ul",[s("li",[e._v("for preciso haver apenas uma inst√¢ncia de uma classe, e essa inst√¢ncia tiver que dar acesso aos clientes atrav√©s de um ponto bem conhecido;")]),e._v(" "),s("li",[e._v("a √∫nica inst√¢ncia tiver de ser extens√≠vel atrav√©s de subclasses, possibilitando aos clientes usar uma inst√¢ncia estendida sem alterar o seu c√≥digo.")])]),e._v(" "),s("h2",{attrs:{id:"estrutura"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#estrutura"}},[e._v("#")]),e._v(" Estrutura")]),e._v(" "),s("figure",[s("img",{attrs:{src:"https://www.plantuml.com/plantuml/svg/NOyn3eCm34Ltdy9ZkG9T6Bfqwi09ejIWIAdJ9ZyJukur2DI29zl_-UkxAt0PzHN9HrSAzq77A4Ww4LjD9YFucQk6JvMxsgnULgtiwCt17UcmSPVcI3xUaer8kWcZeFztiVLCf0d2KGPm6dw1sdPtvVKs2shMKx0hYJvvCI3ghBN7lW00",alt:"uml diagram"}}),e._v(" "),s("figcaption",[e._v("Estrutura Singleton.")])]),e._v(" "),s("h2",{attrs:{id:"participantes"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#participantes"}},[e._v("#")]),e._v(" Participantes")]),e._v(" "),s("ul",[s("li",[e._v("Singleton\n"),s("ul",[s("li",[e._v("define uma opera√ß√£o "),s("code",[e._v("instance")]),e._v(" que permite aos clientes acessarem sua √∫nica inst√¢ncia. "),s("code",[e._v("instance")]),e._v(" √© uma opera√ß√£o de classe.")]),e._v(" "),s("li",[e._v("pode ser respons√°vel pela cria√ß√£o da sua pr√≥pria inst√¢ncia √∫nica.")])])])]),e._v(" "),s("h2",{attrs:{id:"colaboracoes"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#colaboracoes"}},[e._v("#")]),e._v(" Colabora√ß√µes")]),e._v(" "),s("p",[e._v("‚Ä¢ Os clientes acessam uma inst√¢ncia Singleton unicamente pela opera√ß√£o "),s("code",[e._v("instance")]),e._v(" do Singleton.")]),e._v(" "),s("h2",{attrs:{id:"consequencias"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#consequencias"}},[e._v("#")]),e._v(" Consequ√™ncias")]),e._v(" "),s("p",[e._v("O padr√£o Singleton apresenta v√°rios benef√≠cios:")]),e._v(" "),s("ol",[s("li",[e._v("Acesso controlado √† inst√¢ncia √∫nica. Como a classe Singleton encapsula a sua √∫nica inst√¢ncia, possui controle total sobre como e quando os clientes a acessam.")]),e._v(" "),s("li",[e._v("Espa√ßo de nomes reduzido. O padr√£o Singleton representa uma melhoria em rela√ß√£o ao uso de vari√°veis globais. Ele evita a polui√ß√£o do espa√ßo de nomes com vari√°veis globais que armazenam inst√¢ncias √∫nicas.")]),e._v(" "),s("li",[e._v("Permite um refinamento de opera√ß√µes e da representa√ß√£o. A classe Singleton pode ter subclasses e √© f√°cil configurar uma aplica√ß√£o com uma inst√¢ncia dessa classe estendida. Voc√™ pode configurar a aplica√ß√£o com uma inst√¢ncia da classe de que necessita em tempo de execu√ß√£o.")]),e._v(" "),s("li",[e._v("Permite um n√∫mero vari√°vel de inst√¢ncias. O padr√£o torna f√°cil mudar de id√©ia, permitindo mais de uma inst√¢ncia da classe Singleton. Al√©m disso, voc√™ pode usar a mesma abordagem para controlar o n√∫mero de inst√¢ncias que a aplica√ß√£o utiliza. Somente a opera√ß√£o que permite acesso √† inst√¢ncia de Singleton necessita ser mudada("),s("a",{attrs:{href:"../nao_gof/Multiton"}},[e._v("Multiton")]),e._v(", "),s("a",{attrs:{href:"../nao_gof/ObjectPool"}},[e._v("Object Pool")]),e._v(").")]),e._v(" "),s("li",[e._v("Mais flex√≠vel do que opera√ß√µes de classe. Uma outra maneira de empacotar a funcionalidade de um singleton √© usando opera√ß√µes de classe (ou seja, fun√ß√µes-membro est√°ticas em C++ ou m√©todos de classe em Smalltalk). Por√©m, as t√©cnicas de ambas as linguagens tornam dif√≠cil mudar um projeto para permitir mais que uma inst√¢ncia de uma classe. Al√©m disso, as fun√ß√µes- membro est√°ticas em C++ nunca s√£o virtuais, o que significa que as subclasses n√£o podem redefini-las polimorficamente.")])]),e._v(" "),s("h2",{attrs:{id:"implementacao"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#implementacao"}},[e._v("#")]),e._v(" Implementa√ß√£o")]),e._v(" "),s("p",[e._v("A seguir apresentamos t√≥picos de implementa√ß√£o a serem considerados ao usar o\npadr√£o Singleton:")]),e._v(" "),s("ol",[s("li",[s("p",[e._v("Garantindo uma √∫nica inst√¢ncia. O padr√£o Singleton torna a inst√¢ncia √∫nica uma inst√¢ncia normal de uma classe, mas essa classe √© escrita de maneira que somente uma inst√¢ncia possa ser criada.")]),e._v(" "),s("p",[e._v("Uma forma comum de fazer isso √© ocultando a opera√ß√£o que cria a inst√¢ncia usando uma opera√ß√£o de classe (isto √©, ou uma fun√ß√£o-membro est√°tica ou um m√©todo de classe) que garanta que apenas uma √∫nica inst√¢ncia seja criada. Esta opera√ß√£o tem acesso √† vari√°vel que mant√©m a √∫nica inst√¢ncia, e garante que a vari√°vel seja iniciada com a inst√¢ncia √∫nica antes de retornar ao seu valor. Esta abordagem assegura que um singleton seja criado e iniciado antes da sua primeira utiliza√ß√£o.")]),e._v(" "),s("p",[e._v("Em C++, vo√ß√™ pode definir a opera√ß√£o de classe com uma fun√ß√£o-membro est√°tica Instance da classe Singleton. Singleton tamb√©m define uma vari√°vel-membro est√°tica "),s("code",[e._v("_instance")]),e._v(" que cont√©m um apontador para sua √∫nica inst√¢ncia.")]),e._v(" "),s("p",[e._v("A classe "),s("code",[e._v("Singleton")]),e._v(" √© declarada como")]),e._v(" "),s("div",{staticClass:"language-c++ line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("class Singleton {\npublic:\n    static Singleton* Instance() ;\nprotected:\n    Singleton();\nprivate:\n    static Singleton* _ instance;\n}\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br")])]),s("p",[e._v("A implementa√ß√£o correspondente √© a seguinte")]),e._v(" "),s("div",{staticClass:"language-c++ line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("Singleton* Singleton::_instance = 0;\n\nSingleton* Singleton::Instance(){\n    if (_instance == 0) {\n        _instance = new Singleton;\n    return _instance;\n}\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br")])]),s("p",[e._v("Os clientes acessam o singleton atrav√©s da fun√ß√£o membro "),s("code",[e._v("Instance")]),e._v(". A vari√°vel "),s("code",[e._v("_instance")]),e._v(" √© iniciada com 0, e a fun√ß√£o-membro est√°tica "),s("code",[e._v("Instance")]),e._v(" retorna o seu valor, iniciando-a com a √∫nica inst√¢ncia se ele for 0. "),s("code",[e._v("Instance")]),e._v(" usa "),s("em",[e._v("lazy initialization")]),e._v("; o valor que ela retorna n√£o √© criado e armazenado at√© ser acessado pela primeira vez.")]),e._v(" "),s("p",[e._v("Note que o constructor √© protegido. Um cliente que tenta instanciar "),s("code",[e._v("Singleton")]),e._v(" diretamente obter√° como resposta um erro em tempo de compila√ß√£o. Isto assegura que somente uma inst√¢ncia possa ser criada.")]),e._v(" "),s("p",[e._v("Al√©m do mais, uma vez que "),s("code",[e._v("_instance")]),e._v(" √© um apontador para um objeto "),s("code",[e._v("Singleton")]),e._v(", a fun√ß√£o-membro Instance pode atribuir um apontador para uma subclasse de "),s("code",[e._v("Singleton")]),e._v(" para esta vari√°vel. Daremos um exemplo do que dissemos aqui na se√ß√£o Exemplo de c√≥digo.")]),e._v(" "),s("p",[e._v("H√° uma outra coisa a ser observada sobre a implementa√ß√£o em C++. N√£o √© suficiente definir o singleton como um objeto global ou est√°tico, confiando numa inicializa√ß√£o autom√°tica. Existem tr√™s raz√µes para isto:")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[e._v(" - n√£o podemos garantir que somente uma inst√¢ncia de um objeto est√°tico ser√° declarada;\n - talvez n√£o tenhamos informa√ß√£o suficiente para instanciar cada singleton em tempo de inicializa√ß√£o est√°tica. Um singleton pode necessitar de valores que s√£o computados mais tarde, durante a execu√ß√£o do programa;\n - C++ n√£o define a ordem pela qual os construtores para objetos globais s√£o chamados entre unidades de compila√ß√£o [ES90]. Isso significa que n√£o podem existir depend√™ncias entre singletons; se alguma existir, ent√£o √© inevit√°vel a ocorr√™ncia de erro.\n")])])]),s("p",[e._v("Uma defici√™ncia adicional (embora pequena) da abordagem objeto global/ est√°tico √© que ela for√ßa a cria√ß√£o de todos singletons, quer sejam usados ou n√£o. O uso de uma fun√ß√£o-membro est√°tica evita todos estes problemas. Em Smalltalk, a fun√ß√£o que retorna a inst√¢ncia √∫nica √© implementada como um m√©todo de classe da classe Singleton. Para garantir que somente uma inst√¢ncia seja criada, redefine-se a opera√ß√£o new. A classe Singleton resultante pode ter os seguintes m√©todos de classe, em que "),s("code",[e._v("SoleInstance")]),e._v(" √© uma vari√°vel de classe que n√£o √© usada em nenhum outro lugar.")]),e._v(" "),s("div",{staticClass:"language-smalltalk line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-smalltalk"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("new")]),e._v("\n    "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("-")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("self")]),e._v(" error"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v("'cannot create new object'")]),e._v("\ndefault\n    SoleInstance isNil ifTrue"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("Solelnstance "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":=")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("super")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("new")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("\n    "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("^")]),e._v(" Soleinstance\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br")])])]),e._v(" "),s("li",[s("p",[e._v('Criando subclasses da classe Singleton. O ponto principal n√£o √© a defini√ß√£o da subclasse, mas sim a instala√ß√£o da sua √∫nica inst√¢ncia de maneira que os clientes possam ser capazes de us√°-la. Em ess√™ncia, a vari√°vel que referencia a inst√¢ncia do singleton deve ser iniciada com uma inst√¢ncia da subclasse. A t√©cnica mais simples √© determinar qual singleton voc√™ quer usar na opera√ß√£o Instance do Singleton. Um exemplo na se√ß√£o de Exemplo mostra como implementar essa t√©cnica com vari√°veis do ambiente (operacional). Uma outra maneira de escolher a subclasse de Singleton √© retirar a implementa√ß√£o de Instance da classe-m√£e (por exemplo, MazeFactory) e coloc√°-la na subclasse. Isto permite a um programador C++ decidir a classe do singleton em tempo de "Linkedi√ß√£o" (link-time), mantendo-a oculta dos seus clientes (por exemplo, fazendo a liga√ß√£o com um arquivo-objeto que cont√©m uma implementa√ß√£o diferente).\nA solu√ß√£o da liga√ß√£o fixa a escolha da classe do singleton em tempo de "linkedi√ß√£o", o que torna dif√≠cil escolher a classe do singleton em tempo de execu√ß√£o. O uso de instru√ß√µes condicionais para determina√ß√£o da subclasse √© mais flex√≠vel, por√©m codifica de maneira r√≠gida o conjunto das classes Singleton poss√≠veis. Nenhuma abordagem √© flex√≠vel o bastante em todos os casos.\nUma abordagem mais flex√≠vel utiliza um sistema de registro de singletons (registry of singletons). Em vez de ter Instance definindo o conjunto das classes Singleton poss√≠veis, as classes Singleton podem registrar suas inst√¢ncias singleton por nome, num sistema de registro de conhecimento geral. O sistema de registro associa nomes e singletons. Os nomes s√£o constitu√≠dos de cadeias de caracteres. Quando Instance necessita um singleton, ela consulta o sistema de registro, procurando o singleton pelo nome. O sistema de registro procura o singleton correspondente (se existir) e o retorna ao cliente. Essa solu√ß√£o libera Instance da necessidade de ter que conhecer todas as poss√≠veis classes ou inst√¢ncias do Singleton. Tudo o que √© necess√°rio √© uma interface comum para todas as classes Singleton, que inclua opera√ß√µes de registro:')]),e._v(" "),s("div",{staticClass:"language-c++ line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("class Singleton {\npublic:\n    static void Register(const char* name, Singleton*) ;\n    static Singleton* Instance() ;\nprotected:\n    static Singleton* Lookup(const char* name) ;\nprivate:\n    static Singleton* _ instance;\n    static List<NameSingletonPair>* _registry;\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br")])])])]),e._v(" "),s("p",[e._v("Register registra a inst√¢ncia de Singleton com um nome fornecido. Para manter o registro simples, necessitaremos que armazene uma lista de objetos "),s("code",[e._v("NameSingletonPair")]),e._v(". Cada "),s("code",[e._v("NameSingletonPair")]),e._v(" mapeia (associa) um nomea um singleton. Dado um nome, a opera√ß√£o "),s("code",[e._v("Lookup")]),e._v(" encontra o singleton correspondente. Assumiremos que uma vari√°vel do ambiente especifica o nome do singleton desejado.")]),e._v(" "),s("p",[e._v("Singleton‚Ä¢ Singleton:: Instance ( ) {\ni f (_instance\nconst char‚Ä¢ singletonName = ;\n/ / usu√°rio ou ambiente fornece esse valor no in√≠cio da execu√ß√£o\n_ instance = Lookup (singletonName) ;\n// l√£)kup retorna O se n√£o h√° qualquer singleton com o nome verificado\nreturn _ instance;")]),e._v(" "),s("p",[e._v("Onde as classes Singleton registram a si mesmas? Uma possibilidade √© faz√™-\n10 no seu constructor. Por exemplo, uma subclasse MySing1eton poderia\nfazer o seguinte:")]),e._v(" "),s("p",[e._v('MySingIeton:: ( ) (\nSingleton:: Register( "MySing1eton*, this) ;')]),e._v(" "),s("p",[e._v("Naturalmente, o construtor n√£o ser√° chamado a menos que algu√©m instancie\na classe, o que repete o problema que o padr√£o Singleton est√° tentando resolver!\nN√≥s podemos contornar este problema em C++ atrav√©s da defini√ß√£o de uma\ninst√¢ncia est√°tica de MySingleton. Por exemplo, podemos definir")]),e._v(" "),s("p",[e._v("static MySing1eton theSingIeton;")]),e._v(" "),s("p",[e._v("no arquivo que cont√©m a implementa√ß√£o de MySingleton.")]),e._v(" "),s("p",[e._v("A classe Singleton n√£o √© mais respons√°vel pela cria√ß√£o do singleton. Em vez\ndisso, sua responsabilidade prim√°ria √© tornar acess√≠vel o objeto singleton\nescolhido no sistema. A solu√ß√£o que usa o objeto est√°tico ainda apresenta um\nproblema potencial ‚Äî todas as inst√¢ncias de todas as subclasses poss√≠veis de\nSingleton devem ser criadas, pois, caso contr√°rio, n√£o ser√£o registradas.")]),e._v(" "),s("h2",{attrs:{id:"exemplo-de-codigo"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#exemplo-de-codigo"}},[e._v("#")]),e._v(" Exemplo de c√≥digo")]),e._v(" "),s("p",[e._v("Suponha que definimos uma classe MazeFactory para construir labirintos. MazeFactory define uma interface para constru√ß√£o de diferentes partes de um labirinto. As subclasses podem redefinir as opera√ß√µes para retornar inst√¢ncias de classes-produtos especializadas, tal como BombedWall no lugar de simples Objetos Wall.")]),e._v(" "),s("p",[e._v("O fato relevante aqui √© que a aplica√ß√£o Maze necessita somente de uma inst√¢ncia de uma f√°brica de labirintos, e que essa inst√¢ncia dever√° estar dispon√≠vel para o c√≥digo que construir qualquer parte do labirinto. √â a√≠ que o padr√£o Singleton entra. Ao tornar MazeFactory um singleton, n√≥s tornamos o objeto-labirinto (maze) acess√≠vel global- mente sem recorrer a vari√°veis globais.")]),e._v(" "),s("p",[e._v("Para simplificar, suponhamos que nunca criaremos subclasses de Ma zeFactory (a alternativa ser√° considerada mais √† frente). N√≥s tornamos Ma uma classe Singleton em C++, acrescentando uma opera√ß√£o est√°tica Instance e um membro est√°tico "),s("code",[e._v("_instance")]),e._v(" para conter a √∫nica inst√¢ncia existente. Tamb√©m devemos proteger o constructor para prevenir instancia√ß√µes acidentais, as quais nos levariam a ter mais que uma inst√¢ncia.")]),e._v(" "),s("p",[e._v("class MazeFactory {\npubl i c :\nstatic MazeFactory* Instance ( ) ;\n// interface existente vai aqui\nprotected:\nMazeFactory ) ;\nprivate:\nstatic MazeFactory* _ instance;")]),e._v(" "),s("p",[e._v("A implementa√ß√£o correspondente √©\nMazeFactory* MazeFactory; : _ instance = C\nMazeFactory* MazeFactory:: Instance ( ) (\nii (_instance O) {\n_ instance new MazeFactory ;\nreturn _instance;")]),e._v(" "),s("p",[e._v("Agora verificaremos o que acontece quando existem subclasses de Ma zeFactory\ne a aplica√ß√£o tem que decidir qual delas usar. Selecionaremos o tipo de labirinto atrav√©s\nde uma vari√°vel do ambiente e acrescentaremos o c√≥digo que instancia a subclasse\napropriada de Ma z eFac tory com base no valor da vari√°vel do ambiente. Um bom lugar\npara colocar este c√≥digo √© a opera√ß√£o Instance, porque ela j√° instancia MazeFactory:")]),e._v(" "),s("p",[e._v('MazeFactory* MazeFactory :: Instance C) (\ni f C ‚Äîinstance ‚Äî\nconst chars mazeStyle = getenv( ) ;\ni f (strcmp (mazestyle, ‚Ä¢ bombed") O) (\n_ instance = new BombedMazeFactory;\n) else it (strcmp (mazeStyIe, "enchanted"}\n_ instance = new EnchantedMazeFactory;\noutras subclasses poss√≠veis\n) else {\n// default\n_ instance = new MazeFactory;\nreturn _ instance;')]),e._v(" "),s("p",[e._v("Note que Instance deve ser modificada toda vez que voc√™ define uma nova subclasse de MazeFactory. Isso pode n√£o ser um problema nesta aplica√ß√£o, mas pode ser um problema para as f√°bricas abstratas definidas num framework.")]),e._v(" "),s("p",[e._v("Uma solu√ß√£o poss√≠vel seria usar a t√©cnica do uso de um sistema de registro descrita na se√ß√£o Implementa√ß√£o. A liga√ß√£o din√¢mica (dynamic linking) poderia tamb√©m ser √∫til aqui ‚Äîela evitaria que a aplica√ß√£o tivesse que carregar para a mem√≥ria todas as subclasses que n√£o s√£o usadas.")]),e._v(" "),s("h2",{attrs:{id:"usos-conhecidos"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#usos-conhecidos"}},[e._v("#")]),e._v(" Usos conhecidos")]),e._v(" "),s("p",[e._v("Um exemplo do padr√£o Singleton em Smalltalk-80 [Par90] √© o conjunto de mudan√ßas no c√≥digo efetuado por ChangeSet current. Um exemplo mais sutil √© o relacionamento entre classes e suas metaclasses. Uma metaclasse √© a classe de uma classe, e cada metaclasse tem uma inst√¢ncia. As metaclasses n√£o t√™m nomes (exceto indiretamente, atrav√©s do nome da sua √∫nica inst√¢ncia), mas registram e acompanham a sua √∫nica inst√¢ncia, e normalmente n√£o criar√£o outra.")]),e._v(" "),s("p",[e._v("O toolkit para constru√ß√£o de interfaces de usu√°rio Inter Views [LCI*92] usa o padr√£o Singleton para acessar as √∫nicas inst√¢ncias de suas classes Session e WidgetKit, entre outras. Session define o ciclo de eventos dispar√°veis da aplica√ß√£o principal, armazena o banco de dados das prefer√™ncias de estilo do usu√°rio e administra conex√µes para um ou mais dispositivos f√≠sicos de display. WidgetKit √© uma Abstract Factory (95) para definir os widgets de estilo de intera√ß√£o. A opera√ß√£o WidgetKit:: instance determina a subclasse espec√≠fica de WidgetKit que √© instanciada baseada numa vari√°vel de ambiente que Session define. Uma opera√ß√£o similar em determina se s√£o suportados displays monocrom√°ticos ou coloridos e configura a inst√¢ncia singleton de Session de acordo.")]),e._v(" "),s("h2",{attrs:{id:"padrao-relacionados"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#padrao-relacionados"}},[e._v("#")]),e._v(" Padr√£o relacionados")]),e._v(" "),s("p",[e._v("Muitos padr√µes podem ser implementados usando Singleton. Ver "),s("a",{attrs:{href:"/gof/AbstractFactory"}},[e._v("Abstract Factory")]),e._v(", "),s("a",{attrs:{href:"/gof/Builder"}},[e._v("Builder")]),e._v(" e "),s("a",{attrs:{href:"/gof/Prototype"}},[e._v("Prototype")]),e._v(".")]),e._v(" "),s("h2",{attrs:{id:"referencias"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#referencias"}},[e._v("#")]),e._v(" Refer√™ncias")]),e._v(" "),s("hr",{staticClass:"footnotes-sep"}),e._v(" "),s("section",{staticClass:"footnotes"},[s("ol",{staticClass:"footnotes-list"},[s("li",{staticClass:"footnote-item",attrs:{id:"fn1"}},[s("p",[e._v("GAMMA, Erich. et al. Padr√µes de projetos: Solu√ß√µes reutiliz√°veis de software orientados a objetos Bookman editora, 2009. "),s("a",{staticClass:"footnote-backref",attrs:{href:"#fnref1"}},[e._v("‚Ü©Ô∏é")])])])])])])}),[],!1,null,null,null);a.default=o.exports}}]);