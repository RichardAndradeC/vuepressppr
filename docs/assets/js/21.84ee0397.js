(window.webpackJsonp=window.webpackJsonp||[]).push([[21],{392:function(e,o,a){"use strict";a.r(o);var s=a(29),i=Object(s.a)({},(function(){var e=this,o=e.$createElement,a=e._self._c||o;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("ol",[a("li",[e._v("OCP ‚Äî Open-Closed Principle:")]),e._v(" "),a("li",[e._v("LSP‚Äî Liskov Substitution Principle:\nPrinc√≠pio da substitui√ß√£o de Liskov ‚Äî Uma classe derivada deve ser substitu√≠vel por sua classe base.\nO princ√≠pio da substitui√ß√£o de Liskov foi introduzido por Barbara Liskov em sua confer√™ncia ‚ÄúData abstraction‚Äù em 1987. A defini√ß√£o formal de Liskov diz que:\nSe para cada objeto o1 do tipo S h√° um objeto o2 do tipo T de forma que, para todos os programas P definidos em termos de T, o comportamento de P √© inalterado quando o1 √© substitu√≠do por o2 ent√£o S √© um subtipo de T\nUm exemplo mais simples e de f√°cil compreens√£o dessa defini√ß√£o. Seria:\nse S √© um subtipo de T, ent√£o os objetos do tipo T, em um programa, podem ser substitu√≠dos pelos objetos de tipo S sem que seja necess√°rio alterar as propriedades deste programa. ‚Äî Wikipedia.\nPara facilitar o entendimento, veja esse princ√≠pio na pr√°tica neste simples exemplo:")])]),e._v(" "),a("p",[e._v("Estamos passando como par√¢metro tanto a classe pai como a classe derivada e o c√≥digo continua funcionando da forma esperada.\nExemplos de viola√ß√£o do LSP:\nSobrescrever/implementar um m√©todo que n√£o faz nada;\nLan√ßar uma exce√ß√£o inesperada;\nRetornar valores de tipos diferentes da classe base;")]),e._v(" "),a("p",[e._v("Para n√£o violar o Liskov Substitution Principle, al√©m de estruturar muito bem as suas abstra√ß√µes, em alguns casos, voc√™ precisara usar a inje√ß√£o de depend√™ncia e tamb√©m usar outros princ√≠pios do SOLID, como por exemplo, o Open-Closed Principle e o Interface Segregation Principle ‚Äî ser√° abordado no pr√≥ximo t√≥pico.\nSeguir o LSP nos permite usar o polimorfismo com mais confian√ßa. Podemos chamar nossas classes derivadas referindo-se √† sua classe base sem preocupa√ß√µes com resultados inesperados.\n4. ISP ‚Äî Interface Segregation Principle:\nPrinc√≠pio da Segrega√ß√£o da Interface ‚Äî Uma classe n√£o deve ser for√ßada a implementar interfaces e m√©todos que n√£o ir√£o utilizar.\nEsse princ√≠pio basicamente diz que √© melhor criar interfaces mais espec√≠ficas ao inv√©s de termos uma √∫nica interface gen√©rica.\nVamos ver o ISP na pr√°tica atrav√©s de c√≥digos:\nEm um cen√°rio fict√≠cio para cria√ß√£o de um game de animais, teremos algumas aves que ser√£o tratadas como personagens dentro do jogo. Sendo assim, criaremos uma interface Aves para abstrair o comportamento desses animais, depois faremos que nossas classes implementem essa interface, veja:")]),e._v(" "),a("p",[e._v("Percebam que ao criar a interface Aves, atribu√≠mos comportamentos gen√©ricos e isso acabou for√ßando a classe Pinguim a implementar o m√©todo setAltitude()do qual ela n√£o deveria ter, pois pinguins n√£o voam! Dessa forma, estamos violando o Interface Segregation Principle ‚Äî E o LSP tamb√©m!\nPara resolver esse problema, devemos criar interfaces mais espec√≠ficas, veja:")]),e._v(" "),a("p",[e._v("No exemplo acima, retiramos o m√©todo setAltitude() da interface Aves e adicionamos em uma interface derivada AvesQueVoam. Isso nos permitiu isolar os comportamentos das aves de maneira correta dentro do jogo, respeitando o princ√≠pio da segrega√ß√£o das interfaces.\nPoder√≠amos melhorar ainda mais esse exemplo, criando uma interface Renderizavel pra abstrair esse comportamento, mas o foco aqui √© explicar o conceito e n√£o desenvolver o game, ent√£o vamos para o pr√≥ximo princ√≠pio.\n5. DIP ‚Äî Dependency Inversion Principle:\nPrinc√≠pio da Invers√£o de Depend√™ncia ‚Äî Dependa de abstra√ß√µes e n√£o de implementa√ß√µes.\nDe acordo com Uncle Bob, esse princ√≠pio pode ser definido da seguinte forma:")]),e._v(" "),a("ol",[a("li",[e._v("M√≥dulos de alto n√≠vel n√£o devem depender de m√≥dulos de baixo n√≠vel. Ambos devem depender da abstra√ß√£o.")]),e._v(" "),a("li",[e._v("Abstra√ß√µes n√£o devem depender de detalhes. Detalhes devem depender de abstra√ß√µes.\nNo contexto da programa√ß√£o orientada a objetos, √© comum que as pessoas confundam a Invers√£o de Depend√™ncia com a Inje√ß√£o de Depend√™ncia, por√©m s√£o coisas distintas, mas que relacionam entre si com um proposito em comum, deixar o c√≥digo desacoplado.\nImportante: Invers√£o de Depend√™ncia n√£o √© igual a Inje√ß√£o de Depend√™ncia, fique ciente disso! A Invers√£o de Depend√™ncia √© um princ√≠pio (Conceito) e a Inje√ß√£o de Depend√™ncia √© um padr√£o de projeto (Design Pattern).\nVamos entender tudo isso na pr√°tica atrav√©s de exemplos:")])]),e._v(" "),a("p",[e._v("Para recuperar a senha, a classe PasswordReminder, precisa conectar na base de dados, por tanto, ela cria um instancia da classe MySQLConnection em seu m√©todo construtor para realizar as respectivas opera√ß√µes.\nNesse pequeno trecho de c√≥digo temos um alto n√≠vel de acoplamento, isso acontece porque a classe PasswordReminder tem a responsabilidade de criar uma inst√¢ncia da classe MySQLConnection! Se quis√©ssemos reaproveitar essa classe em outro sistema, teriamos obrigatoriamente de levar a classe MySQLConnection junto, portanto, temos um forte acoplamento aqui.\nPara resolver esse problema de acoplamento, podemos refatorar nosso c√≥digo da seguinte forma. Veja:")]),e._v(" "),a("p",[e._v("Com o c√≥digo refatorado, a cria√ß√£o do objeto MySQLConnection deixa de ser uma responsabilidade da classe PasswordReminder, a classe de conex√£o com o banco de dados virou uma depend√™ncia que deve ser injetada via m√©todo construtor. Olha o que apareceu para n√≥s: Inje√ß√£o de Depend√™ncia!\nApesar de termos usado a inje√ß√£o de depend√™ncia para melhorar o n√≠vel de acoplamento do nosso c√≥digo, ele ainda viola o princ√≠pio da invers√£o de depend√™ncia! ‚Äî lembre-se, um n√£o √© igual ao outro.\nAl√©m de violar o DIP, se voc√™ prestar aten√ß√£o na forma que o exemplo foi codificado ir√° perceber que ele tamb√©m viola o Open-Closed Principle. Por exemplo, se precisarmos alterar o banco de dados de MySQL para Oracle ter√≠amos que editar a classe PasswordReminder.\nPor que nosso exemplo refatorado viola o Dependency Inversion Principle?\nPorque estamos dependendo de uma implementa√ß√£o e n√£o de uma abstra√ß√£o, simples assim.\nDe acordo com a defini√ß√£o do DIP, um m√≥dulo de alto n√≠vel n√£o deve depender de m√≥dulos de baixo n√≠vel, ambos devem depender da abstra√ß√£o. Ent√£o, a primeira coisa que precisamos fazer √© identificar no nosso c√≥digo qual √© o m√≥dulo de alto n√≠vel e qual √© o m√≥dulo de baixo n√≠vel. M√≥dulo de alto n√≠vel √© um m√≥dulo que depende de outros m√≥dulos.\nNo nosso exemplo ,PasswordReminder depende da classe MySQLConnection. Sendo assim, PasswordReminder √© o m√≥dulo de alto n√≠vel e MySQLConnection √© o m√≥dulo de baixo n√≠vel. Mas, MySQLConnection √© uma implementa√ß√£o e n√£o uma abstra√ß√£o!\nComo refatoramos nosso exemplo para utilizar o DIP?\nSe tratando de POO, voc√™ j√° ouviu aquela frase:\n‚ÄúPrograme para uma interface e n√£o para uma implementa√ß√£o.‚Äù\nPois bem, √© exatamente o que iremos fazer, criar uma interface!\ninterface DBConnectionInterface\n{\npublic function connect();\n}\nAgora, vamos refatorar nosso exemplo fazendo que nossos m√≥dulos de alto e baixo n√≠vel dependam da abstra√ß√£o proposta pela interface que acabamos de criar. Veja:")]),e._v(" "),a("p",[e._v("Perfeito! Agora a classe PasswordReminder n√£o tem a m√≠nima ideia de qual banco de dados a aplica√ß√£o ir√° utilizar. Dessa forma, n√£o estamos mais violando o DIP, ambas as classes est√£o desacopladas e dependendo de uma abstra√ß√£o. Al√©m disso, estamos favorecendo a reusabilidade do c√≥digo e como ‚Äúb√¥nus‚Äù tamb√©m estamos respeitando o SRP e o OCP.\nConclus√£o\nA sistem√°tica dos princ√≠pios SOLID tornam o software mais robusto, escal√°vel e flex√≠vel, deixando-o tolerante a mudan√ßas, facilitando a implementa√ß√£o de novos requisitos para a evolu√ß√£o e manuten√ß√£o do sistema.\nLevando em considera√ß√£o algumas experi√™ncias vividas ao longo da minha hist√≥ria no mundo da tecnologia, acredito que os princ√≠pios SOLID, juntamente com algumas t√©cnicas e boas praticas de Clean Code, s√£o fatores essenciais que todos os desenvolvedores deveriam aplicar em seus c√≥digos.\nPode ser um pouco assustador no in√≠cio usar todos esses princ√≠pios ‚Äî nem sempre conseguiremos aplicar todos em nosso projeto ‚Äî mas com a pr√°tica e const√¢ncia, aos poucos vamos adquirindo a experi√™ncia necess√°ria para escrever c√≥digos cada vez mais maduros, os princ√≠pios SOLID servem como guias pra isso.\nObrigado por ler! Se voc√™ gostou do artigo, d√™ um clap üëè.\nRefer√™ncias:\nhttp://butunclebob.com/ArticleS.UncleBob.PrinciplesOfOod\nhttps://en.wikipedia.org/wiki/SOLID\nhttps://laracasts.com/series/solid-principles-in-php\nhttps://www.tomdalling.com/blog/software-design/solid-class-design-the-liskov-substitution-principle")]),e._v(" "),a("h1",{attrs:{id:"solid-üöß"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#solid-üöß"}},[e._v("#")]),e._v(" SOLID üöß")]),e._v(" "),a("p",[e._v("SOLID s√£o cinco princ√≠pios da programa√ß√£o orientada a objetos que facilitam no desenvolvimento de softwares, tornando-os f√°ceis de manter e estender. Esses princ√≠pios podem ser aplicados a qualquer linguagem de POO.")]),e._v(" "),a("p",[e._v("Princ√≠pios SOLID")]),e._v(" "),a("ul",[a("li",[e._v("S - Sigle Responsability Principle")]),e._v(" "),a("li",[e._v("O - Open Close Principle")]),e._v(" "),a("li",[e._v("L - Liskov substitution Principle")]),e._v(" "),a("li",[e._v("I - Interface segregation principle")]),e._v(" "),a("li",[e._v("D ‚Äì Dependency inversion principle")])]),e._v(" "),a("h2",{attrs:{id:"srp-single-reponsibility-principle-principio-da-responsabilidade-unica"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#srp-single-reponsibility-principle-principio-da-responsabilidade-unica"}},[e._v("#")]),e._v(" SRP ‚Äì Single reponsibility principle ‚Äì Princ√≠pio da Responsabilidade √önica;")]),e._v(" "),a("h2",{attrs:{id:"ocp-open-closed-principle-principio-do-aberto-e-fechado"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ocp-open-closed-principle-principio-do-aberto-e-fechado"}},[e._v("#")]),e._v(" OCP ‚Äì Open/closed principle ‚Äì Princ√≠pio do Aberto e Fechado;")]),e._v(" "),a("h2",{attrs:{id:"lsp-liskov-substitution-principle-principio-da-substituicao-de-liskov"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#lsp-liskov-substitution-principle-principio-da-substituicao-de-liskov"}},[e._v("#")]),e._v(" LSP ‚Äì Liskov substitution principle ‚Äì Princ√≠pio da Substitui√ß√£o de Liskov;")]),e._v(" "),a("h2",{attrs:{id:"isp-interface-segregation-principle-principio-da-segregacao-de-interface"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#isp-interface-segregation-principle-principio-da-segregacao-de-interface"}},[e._v("#")]),e._v(" ISP ‚Äì Interface segregation principle ‚Äì Princ√≠pio da Segrega√ß√£o de Interface;")]),e._v(" "),a("h2",{attrs:{id:"dip-dependency-inversion-principle-principio-da-inversao-de-dependencia"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#dip-dependency-inversion-principle-principio-da-inversao-de-dependencia"}},[e._v("#")]),e._v(" DIP ‚Äì Dependency inversion principle ‚Äì Princ√≠pio da Invers√£o de Depend√™ncia;")]),e._v(" "),a("p",[e._v("Estes princ√≠pios, quando bem aplicados, ajudam a eliminar os design-smells do nosso c√≥digo, permitindo maior facilidade de manuten√ß√£o e extens√£o.")]),e._v(" "),a("p",[e._v("https://medium.com/desenvolvendo-com-paixao/o-que-%C3%A9-solid-o-guia-completo-para-voc%C3%AA-entender-os-5-princ%C3%ADpios-da-poo-2b937b3fc530")])])}),[],!1,null,null,null);o.default=i.exports}}]);