(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{387:function(e,a,o){"use strict";o.r(a);var t=o(29),s=Object(t.a)({},(function(){var e=this,a=e.$createElement,o=e._self._c||a;return o("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[o("h1",{attrs:{id:"factory-method-gof"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#factory-method-gof"}},[e._v("#")]),e._v(" Factory Method (GOF)")]),e._v(" "),o("h2",{attrs:{id:"intencao"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#intencao"}},[e._v("#")]),e._v(" Inten√ß√£o")]),e._v(" "),o("p",[e._v("Definir uma interface para criar um objeto, mas deixar as subclasses decidirem que classe instanciar. O Factory Method permite adiar a instancia√ß√£o para subclasses.")]),e._v(" "),o("h2",{attrs:{id:"tambem-conhecido-como"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#tambem-conhecido-como"}},[e._v("#")]),e._v(" Tamb√©m conhecido como")]),e._v(" "),o("p",[e._v("Virtual Constructor")]),e._v(" "),o("h2",{attrs:{id:"motivacao"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#motivacao"}},[e._v("#")]),e._v(" Motiva√ß√£o")]),e._v(" "),o("p",[e._v("Os frameworks usam classes abstratas para definir e manter relacionamentos entre objetos. Um framework √© freq√ºentemente respons√°vel tamb√©m pela cria√ß√£o desses objetos.")]),e._v(" "),o("p",[e._v("Considere um framework para aplica√ß√µes que podem apresentar m√∫ltiplos documentos para o usu√°rio. Duas abstra√ß√µes-chave nesse framework s√£o as classes Application (aplica√ß√£o) e Document (documento). As duas classes s√£o abstratas, e os clientes devem prover subclasses para realizar suas implementa√ß√µes espec√≠ficas para a aplica√ß√£o. Por exemplo, para criar uma aplica√ß√£o de desenho, definimos as classes DrawingApplication e DrawingDocument. A classe Application √© respons√°vel pela administra√ß√£o de Documents e ir√° cri√°-los conforme exigido ‚Äî quando o usu√°rio seleciona Open (abrir) ou New (novo), por exemplo, num menu.")]),e._v(" "),o("p",[e._v("Uma vez que a subclasse Document a ser instanciada √© pr√≥pria da aplica√ß√£o espec√≠fica, a classe Application n√£o pode prever a subclasse de Document a ser instanciada ‚Äî a classe Application somente sabe quando um documento deve ser criado, e n√£o que tipo de Document criar. Isso cria um dilema: o framework deve instanciar classes, mas ele somente tem conhecimento de classes abstratas, as quais n√£o pode instanciar.")]),e._v(" "),o("p",[e._v("O padr√£o Factory Method oferece uma solu√ß√£o. Ele encapsula o conhecimento sobre a subclasse de Document que deve ser criada e move este conhecimento para fora do framework.")]),e._v(" "),o("div",{staticClass:"language-plantuml extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v("@startuml\nabstract class Document{\n    {abstract} open()\n    {abstract} close()\n    save()\n    revert()\n}\n\nabstract class Application{\n    {abstract} createDocument()\n    newDocument()\n    openDocument()\n}\n\nclass MyApplication{\n    createDocument()    \n}\n\nDocument -o Application  :docs\nApplication <|-- MyApplication \nMyDocument <- MyApplication\nDocument  <|-- MyDocument \n\nnote right of MyApplication::createDocument \n  return new MyDocument()\nend note\n\nnote right of Application::newDocument \n  Document doc = new createDocument();\n  docs.add(doc);\n  doc.open();\nend note\n\n@enduml\n")])])]),o("p",[e._v("As subclasses de "),o("code",[e._v("Application")]),e._v(" redefinem uma opera√ß√£o abstrata "),o("code",[e._v("createDocument")]),e._v(" em "),o("code",[e._v("Application")]),e._v(" para retornar a subclasse apropriada de "),o("code",[e._v("Document.")]),e._v(" Uma vez que uma subclasse de "),o("code",[e._v("Application")]),e._v(" √© instanciada, pode ent√£o instanciar "),o("code",[e._v("Documents")]),e._v(" espec√≠ficos da aplica√ß√£o sem conhecer suas classes. Chamamos "),o("code",[e._v("createDocument")]),e._v(" um "),o("strong",[e._v("factory method")]),e._v(' porque ele √© respons√°vel pela "manufatura" de um objeto.')]),e._v(" "),o("h2",{attrs:{id:"aplicabilidade"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#aplicabilidade"}},[e._v("#")]),e._v(" Aplicabilidade")]),e._v(" "),o("p",[e._v("Use o padr√£o Factory Method quando:")]),e._v(" "),o("ul",[o("li",[e._v("uma classe n√£o pode antecipar a classe de objetos que deve criam;")]),e._v(" "),o("li",[e._v("uma classe quer que suas subclasses especifiquem os objetos que criam;")]),e._v(" "),o("li",[e._v("classes delegam responsabilidade para uma dentre v√°rias subclasses auxiliares, e voc√™ quer o conhecimento de qual subclasse auxiliar que √© a delegada.")])]),e._v(" "),o("h2",{attrs:{id:"estrutura"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#estrutura"}},[e._v("#")]),e._v(" Estrutura")]),e._v(" "),o("div",{staticClass:"language-plantuml extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v("@startuml\nabstract class Product{\n}\n\nabstract class Creator{\n    {abstract} factoryMethod()\n    anOperation()\n}\n\nclass ConcreteCreator{\n    factoryMethod()\n}\n\nCreator <|-- ConcreteCreator \nConcreteProduct <- ConcreteCreator\nProduct  <|-- ConcreteProduct \n\nnote right of ConcreteCreator::factoryMethod \n  return new ConcreteProduct()\nend note\n\nnote right of Creator::anOperation \n  ...\n  product = factoryMethod();\n  ...\nend note\n\n@enduml\n")])])]),o("h2",{attrs:{id:"participantes"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#participantes"}},[e._v("#")]),e._v(" Participantes")]),e._v(" "),o("ul",[o("li",[o("strong",[e._v("Product")]),e._v(" (Document)\n"),o("ul",[o("li",[e._v("define a interface de objetos que o "),o("code",[e._v("factoryMethod")]),e._v(" cria.")])])]),e._v(" "),o("li",[o("strong",[e._v("ConcreteProduct")]),e._v(" (MyDocument)\n"),o("ul",[o("li",[e._v("implementa a interface de "),o("code",[e._v("Product")]),e._v(".")])])]),e._v(" "),o("li",[o("strong",[e._v("Creator")]),e._v(" (Application)\n"),o("ul",[o("li",[e._v("Declara o "),o("code",[e._v("factoryMethod")]),e._v(", o qual retorna um objeto do tipo "),o("code",[e._v("Product")]),e._v(". "),o("code",[e._v("Creator")]),e._v(" pode tamb√©m definir uma implementa√ß√£o por omiss√£o do "),o("code",[e._v("factoryMethod")]),e._v(" que retorna por omiss√£o um objeto "),o("code",[e._v("ConcreteProduct")]),e._v(".")]),e._v(" "),o("li",[e._v("Pode chamar o "),o("code",[e._v("factoryMethod")]),e._v(" para criar um objeto "),o("code",[e._v("Product.")])])])]),e._v(" "),o("li",[o("strong",[e._v("ConcreteCreator")]),e._v(" (MyApplication)\n"),o("ul",[o("li",[e._v("Redefine o "),o("code",[e._v("factoryMethod")]),e._v(" para retornar a uma inst√¢ncia de um\n"),o("code",[e._v("ConcreteProduct.")])])])])]),e._v(" "),o("h2",{attrs:{id:"colaboracoes"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#colaboracoes"}},[e._v("#")]),e._v(" Colabora√ß√µes")]),e._v(" "),o("p",[e._v("Em constru√ß√£o üöß")]),e._v(" "),o("h2",{attrs:{id:"consequencias"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#consequencias"}},[e._v("#")]),e._v(" Consequ√™ncias")]),e._v(" "),o("h2",{attrs:{id:"implementacao"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#implementacao"}},[e._v("#")]),e._v(" Implementa√ß√£o")]),e._v(" "),o("h2",{attrs:{id:"exemplo-de-codigo"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#exemplo-de-codigo"}},[e._v("#")]),e._v(" Exemplo de c√≥digo")]),e._v(" "),o("h2",{attrs:{id:"usos-conhecidos"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#usos-conhecidos"}},[e._v("#")]),e._v(" Usos conhecidos")]),e._v(" "),o("h2",{attrs:{id:"padrao-relacionados"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#padrao-relacionados"}},[e._v("#")]),e._v(" Padr√£o relacionados")])])}),[],!1,null,null,null);a.default=s.exports}}]);